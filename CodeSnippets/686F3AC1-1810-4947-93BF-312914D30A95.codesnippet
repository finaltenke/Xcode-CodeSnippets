<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>initial collection view controller</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import UIKit

class &lt;#UIViewController#&gt;: UIViewController {
    private var collectionView: UICollectionView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectionView()
        setupViews()
        setupEvents()
    }
}

// MARK: - UICollectionViewDataSource
extension &lt;#UIViewController#&gt;: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -&gt; Int {
        return &lt;#number#&gt;
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
        return &lt;#number#&gt;
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
        let cell = collectionView.dequeueReusable(&lt;#collectionViewCell#&gt;.self, for: indexPath)
        return cell
    }
}

// MARK: - UICollectionViewDelegate
extension &lt;#UIViewController#&gt;: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        &lt;#code#&gt;
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -&gt; UICollectionReusableView {
        let header = collectionView.dequeueReusable(&lt;#UICollectionReusableView#&gt;.self, ofKind: .header, for: indexPath)
        return header
        let footer = collectionView.dequeueReusable(&lt;#UICollectionReusableView#&gt;.self, ofKind: .footer, for: indexPath)
        return footer
    }
}

// MARK: - MJRefresh
extension &lt;#UIViewController#&gt; {
    private func setupRefresh() {
        collectionView.contentInsetAdjustmentBehavior = .never
        collectionView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: -40, right: 0)
        
        let header = MJRefreshNormalHeader(refreshingTarget: self, refreshingAction: #selector(reloadPastData))
        header.setTitle("下拉可以刷新", for: .idle)
        header.setTitle("松开立即刷新", for: .pulling)
        header.lastUpdatedTimeLabel?.isHidden = true
        collectionView.mj_header = header
        
        let footer = MJRefreshAutoNormalFooter(refreshingTarget: self, refreshingAction: #selector(reloadMoreData))
        footer.setTitle("上拉可以加载更多", for: .idle)
        footer.setTitle("正在加载中...",   for: .refreshing)
        footer.setTitle("没有更多内容了～", for: .noMoreData)
        collectionView.mj_footer = footer
    }
    
    @objc private func reloadPastData() {
        
    }
    
    @objc private func reloadMoreData() {
        
    }
}

// MARK: - Events
extension &lt;#UIViewController#&gt; {
    private func setupEvents() {
        
    }
}

// MARK: - UI
extension &lt;#UIViewController#&gt; {
    private func setupViews() {
        view.addSubview(collectionView)
        
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    private func setupCollectionView() {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.minimumInteritemSpacing = 0
        layout.minimumLineSpacing = 0
        layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        layout.itemSize = CGSize(width: &lt;#width#&gt;, height: &lt;#height#&gt;)
        layout.headerReferenceSize = CGSize(width: view.width, height: 44)
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.backgroundColor = .white
        collectionView.isPagingEnabled = false
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.showsVerticalScrollIndicator = false
        collectionView.register(&lt;#UICollectionReusableView#&gt;.self, ofKind: .header)
        collectionView.register(&lt;#UICollectionViewCell#&gt;.self)
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>686F3AC1-1810-4947-93BF-312914D30A95</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>快速建立 包含UICollectionView的UIViewController</string>
	<key>IDECodeSnippetTitle</key>
	<string>【Swift】initial collection view controller</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
